version: "3.8"

services:
  commonapi:
    build:
      context: ../../Common-API
      dockerfile: Dockerfile
    container_name: commonapi-container
    ports:
      - "8083:8083" 
    depends_on:
      - mysql
      - redis
      - mongodb
    networks:
      - app-network
  
  identityapimain:
    build:
      context: ../../Identity-API
      dockerfile: Dockerfile
    container_name: identityapimain-container
    ports:
      - "8094:8094" 
    depends_on:
      - mysql
      - redis
      - mongodb
    networks:
      - app-network

  identityapiprofile:
    build:
      context: ../../Identity-API
      dockerfile: Docker8095/Dockerfile
    container_name: identityapiprofile-container
    ports:
      - "8095:8095" 
    depends_on:
      - mysql
      - redis
      - mongodb
    networks:
      - app-network

  tmapi:
    build:
      context: ../../TM-API
      dockerfile: Dockerfile
    container_name: tmapi-container
    ports:
      - "8089:8089" 
    depends_on:
      - mysql
      - redis
      - mongodb
    networks:
      - app-network
  adminapi:
    build:
      context: ../../Admin-API
      dockerfile: Dockerfile
    container_name: adminapi-container
    ports:
      - "8082:8082" 
    depends_on:
      - mysql
      - redis
      - mongodb
    networks:
      - app-network

  fhirapi:
    build:
      context: ../../FHIR-API
      dockerfile: Dockerfile
    container_name: fhirapi-container
    ports:
      - "8093:8093" 
    depends_on:
      - mysql
      - redis
      - mongodb
    networks:
      - app-network
  # MySQL Database service
  mysql:
    image: mysql:8.0.34
    container_name: mysql-container
    environment:
      MYSQL_ROOT_PASSWORD: 1234
    ports:
      - "3306:3306" # MySQL container port 3306 mapped to host's 3306
    volumes:
      - ./my.cnf:/etc/mysql/my.cnf:ro # Mounting the my.cnf file to the sql container
      - mysql-data:/var/lib/mysql # Mounting the mysql-data volume to the sql container
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql # Mounting the init.sql script in order to create 4 databases.
    networks:
      - app-network

  # Redis Cache service
  redis:
    image: redis:7.2.4
    container_name: redis-container
    ports:
      - "6379:6379" # Redis container port 6379 mapped to host's 6379 (if running on host, stop the service on the host!)
    networks:
      - app-network

  # MongoDB service
  mongodb:
    image: mongo:6.0
    container_name: mongodb-container
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 1234
    ports:
      - "27017:27017" # MongoDB container port 27017 mapped to host's 27017
    volumes:
      - mongodb-data:/data/db # Mounting a volume to persist MongoDB data
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mysql-data:
  mongodb-data:
